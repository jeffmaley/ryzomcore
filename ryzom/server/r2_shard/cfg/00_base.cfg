// Variables required to be defined by other cfgs
//AESHost="localhost";
//AESPort="47702";

// Configure module gateway for layer 5 module comm
StartCommands +=
{
	// Create a gateway module
	"moduleManager.createModule StandardGateway gw",
	// add a layer 5 transport
	"gw.transportAdd L5Transport l5",
	// open the transport
	"gw.transportCmd l5(open)",

	/// Create default connection with admin executor service
	// Create a gateway module
	"moduleManager.createModule StandardGateway gw_aes",
	// create the admin executor service module 
	"moduleManager.createModule AdminExecutorServiceClient aes_client",
	"aes_client.plug gw_aes",

	// create a layer 3 client to connect to aes gateway
	"gw_aes.transportAdd L3Client aes_l3c",
	"gw_aes.transportCmd aes_l3c(connect addr="+AESHost+":"+AESPort+")",
		
};

Paths		+= 
{
	"r2_shard/data_shard", 
	"../save_shard", 
	"r2_shard/data_common", 
	"data_leveldesign/leveldesign/DFN", 
	"data_shard", 
	"data_common",
	"data_leveldesign/dfn",
	"data_leveldesign/primitives" 
};

PathsNoRecurse	+= 
{	
	"data_leveldesign/leveldesign/game_element/emotes",	// for emotes
	"data_leveldesign/leveldesign/Game_elem",			// for sheet_id.bin
	"data_leveldesign/leveldesign/game_element",		// not needed at all
	"data_leveldesign/leveldesign/world_edit_files",	// for primitive format
	"data_leveldesign/leveldesign/World",				// static fame and weather ?
	"data_leveldesign/",
};

GeorgePaths	 = 
{ 
	"data_leveldesign/leveldesign/Game_elem", 
	"data_leveldesign/leveldesign/game_element" 
};

/* Force default value for PDLib directory (e.g. SaveFilesDirectory...)
 * PLEASE NOTICE THAT THIS LINE MUST BE LEFT TO ""
 * Only log analyser must have the $shard parameter to find all shards root directory
 */
PDRootDirectory = "";

// Log PD updates to log file (1 enabled, 0 disabled), see PDLogSaveDirectory to choose where to log
PDEnableLog = 1;

// Log PD StringManager updates to log file (1 enabled, 0 disabled), see PDLogSaveDirectory to choose where to log
PDEnableStringLog = 0;

// Number of seconds between 2 logs to file
PDLogUpdate = 10;

// This is the mapping for logical continent to physical one
ContinentNameTranslator = 
{
	"matis_newbie",	"matis",
	"zorai_newbie",	"zorai",
	"terre",	"terre_oubliee",
	"sources",	"sources_interdites"
};

//NegFiltersDebug		= { "NET", "ADMIN", "MIRROR", "NC", "PATH" };
//NegFiltersInfo		= { "NET", "ADMIN", "MIRROR", "NC", "CF", "TimerManagerUpdate" };
//NegFiltersWarning   = { "CT_LRC", "AnimalSpawned" };

IgnoredFiles = { "continent.cfg", "__read_me.txt", "bandit.html", "flora_primr.primitive" };

// If the update loop is too slow, a thread will produce an assertion.
// By default, the value is set to 10 minutes.
// Set to 0 for no assertion.
UpdateAssertionThreadTimeout = 6000000;

DefaultMaxExpectedBlockSize = 200000000; // 200 M !
DefaultMaxSentBlockSize = 200000000; // 200 M !

// MS Packet size limit in bytes, PER DATASET (warning: depending on the weights, limits per property may be very small)
MaxOutBandwidth = 100000000;

// how to sleep between 2 network updates
// 0 = pipe
// 1 = usleep
// 2 = nanosleep
// 3 = sched_yield
// 4 = nothing
UseYieldMethod = 0;

